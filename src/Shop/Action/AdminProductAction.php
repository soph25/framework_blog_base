<?php

namespace App\Shop\Action;

use App\Shop\Entity\Product;
use App\Shop\Table\ProductTable;
use App\Shop\Upload\PdfUpload;
use App\Shop\Upload\ProductImageUpload;
use Framework\Actions\CrudAction;
use Framework\Renderer\RendererInterface;
use Framework\Router;
use Framework\Session\FlashService;
use Framework\Validator;
use Psr\Http\Message\ServerRequestInterface as Request;

class AdminProductAction extends CrudAction
{

    protected $viewPath = "@shop/admin/products";

    protected $routePrefix = "shop.admin.products";

    protected $acceptedParams = ['name', 'slug', 'created_at', 'description', 'price'];
    /**
     * @var ProductImageUpload
     */
    private $imageUpload;
    /**
     * @var PdfUpload
     */
    private $pdfUpload;

    public function __construct(
        RendererInterface $renderer,
        Router $router,
        ProductTable $table,
        FlashService $flash,
        ProductImageUpload $imageUpload,
        PdfUpload $pdfUpload
    ) {
        parent::__construct($renderer, $router, $table, $flash);
        $this->imageUpload = $imageUpload;
        $this->pdfUpload = $pdfUpload;
    }

    protected function getNewEntity()
    {
        /** @var Product $entity */
        $entity = parent::getNewEntity();
        $entity->setCreatedAt(new \DateTime());
        return $entity;
    }

    /**
     * @param Request $request
     * @param Product $item
     * @return array
     */
    protected function prePersist(Request $request, $item): array
    {
        $params = array_merge($request->getParsedBody(), $request->getUploadedFiles());
        $image = $this->imageUpload->upload($params['image'], $item->getImage());
        if ($image) {
            $params['image'] = $image;
            $this->acceptedParams[] = 'image';
        }
        return array_filter($params, function ($key) {
            return in_array($key, $this->acceptedParams);
        }, ARRAY_FILTER_USE_KEY);
    }

    protected function postPersist(Request $request, $item): void
    {
        $file = $request->getUploadedFiles()['pdf'];
        $productId = $item->getId() ?: $this->table->getPdo()->lastInsertId();
        $this->pdfUpload->upload($file, "$productId.pdf", "$productId.pdf");
    }

    public function delete(Request $request)
    {
        /** @var Product $product */
        $product = $this->table->find($request->getAttribute('id'));
        $this->imageUpload->delete($product->getImage());
        $this->pdfUpload->delete($product->getPdf());
        return parent::delete($request); // TODO: Change the autogenerated stub
    }

    protected function getValidator(Request $request)
    {
        $validator = parent::getValidator($request)
            ->required($this->acceptedParams)
            ->length('name', 5)
            ->length('slug', 5)
            ->slug('slug')
            ->unique('slug', $this->table, null, $request->getAttribute('id'))
            ->length('description', 5)
            ->numeric('price')
            ->dateTime('created_at')
            ->extension('image', ['jpg', 'png'])
            ->extension('pdf', ['pdf']);
        if ($request->getAttribute('id') === null) {
            $validator->uploaded('image');
            $validator->uploaded('pdf');
        }
        return $validator;
    }
}
